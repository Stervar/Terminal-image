import cv2
import numpy as np
import shutil
import os
import sys

def debug_image_processing(image_path):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return None
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    file_stats = os.stat(image_path)
    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_stats.st_size} –±–∞–π—Ç")
    
    # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        image = cv2.imread(image_path)
        
        if image is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenCV")
            return None
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        height, width, channels = image.shape
        print(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
        print(f"üé® –ö–∞–Ω–∞–ª—ã: {channels}")
        
        return image
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
        return None

def image_to_detailed_ascii(image_path):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = debug_image_processing(image_path)
    if image is None:
        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    try:
        terminal_size = shutil.get_terminal_size()
        width = terminal_size.columns
        height = terminal_size.lines - 2
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}")
        width, height = 100, 50
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
    ascii_chars = '@%#*+=-:. '
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    try:
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    # Resize —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    try:
        resized_image = cv2.resize(gray_image, (width, height), 
                                   interpolation=cv2.INTER_AREA)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII
    ascii_image = ""
    for row in resized_image:
        ascii_row = ''.join([ascii_chars[int(pixel/25)] for pixel in row])
        ascii_image += ascii_row + "\n"
    
    return ascii_image

def main():
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = 'Foto.img/photo_2024-11-02_23-10-23.jpg'
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII
        ascii_art = image_to_detailed_ascii(image_path)
        
        # –í—ã–≤–æ–¥
        print(ascii_art)
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {sys.exc_info()}")

if __name__ == "__main__":
    main()